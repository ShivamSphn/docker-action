name: Docker Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # nvrc-jupyter:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4.1.7

  #     - name: Docker Setup Buildx
  #       uses: docker/setup-buildx-action@v3.6.1

  #     - name: Docker Login
  #       uses: docker/login-action@v3.3.0
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Generate version tags
  #       id: tags
  #       run: |
  #         # Get current date in YYYYMMDD format
  #         DATE_TAG=$(date +'%Y%m%d')
  #         # Get short SHA
  #         SHA_TAG=$(echo ${{ github.sha }} | cut -c1-7)
  #         # Load version prefix from .env
  #         VERSION_PREFIX=$(grep VERSION_PREFIX .env | cut -d '=' -f2)
  #         # Create tag list
  #         TAGS="${{ secrets.DOCKERHUB_USERNAME }}/nvrc-jupyter:latest,${{ secrets.DOCKERHUB_USERNAME }}/nvrc-jupyter:${VERSION_PREFIX}${DATE_TAG},${{ secrets.DOCKERHUB_USERNAME }}/nvrc-jupyter:${VERSION_PREFIX}${SHA_TAG}"
  #         echo "tags=${TAGS}" >> $GITHUB_OUTPUT

  #     - name: Build and push NVRC Jupyter Docker image
  #       uses: docker/build-push-action@v6.7.0
  #       with:
  #         context: ./nvrc-image-jupyter
  #         file: ./nvrc-image-jupyter/Dockerfile
  #         push: true
  #         tags: ${{ steps.tags.outputs.tags }}

  sglang-server:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.7

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Docker Login
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate version tags
        id: tags
        run: |
          # Get current date in YYYYMMDD format
          DATE_TAG=$(date +'%Y%m%d')
          # Get short SHA
          SHA_TAG=$(echo ${{ github.sha }} | cut -c1-7)
          # Load version prefix from .env
          VERSION_PREFIX=$(grep VERSION_PREFIX .env | cut -d '=' -f2)
          # Create tag list
          TAGS="${{ secrets.DOCKERHUB_USERNAME }}/sglang-login:latest,${{ secrets.DOCKERHUB_USERNAME }}/sglang-login:${VERSION_PREFIX}${DATE_TAG},${{ secrets.DOCKERHUB_USERNAME }}/sglang-login:${VERSION_PREFIX}${SHA_TAG}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT

      - name: Build and push SGLang Server Docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: ./sglang-login
          file: ./sglang-login/Dockerfile
          push: true
          tags: ${{ steps.tags.outputs.tags }}

  # triton-jupyter:
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4.1.7

  #     - name: Docker Setup Buildx
  #       uses: docker/setup-buildx-action@v3.6.1

  #     - name: Docker Login
  #       uses: docker/login-action@v3.3.0
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Generate version tags
  #       id: tags
  #       run: |
  #         # Get current date in YYYYMMDD format
  #         DATE_TAG=$(date +'%Y%m%d')
  #         # Get short SHA
  #         SHA_TAG=$(echo ${{ github.sha }} | cut -c1-7)
  #         # Load version prefix from .env
  #         VERSION_PREFIX=$(grep VERSION_PREFIX .env | cut -d '=' -f2)
  #         # Create tag list
  #         TAGS="${{ secrets.DOCKERHUB_USERNAME }}/triton-jupyter:latest,${{ secrets.DOCKERHUB_USERNAME }}/triton-jupyter:${VERSION_PREFIX}${DATE_TAG},${{ secrets.DOCKERHUB_USERNAME }}/triton-jupyter:${VERSION_PREFIX}${SHA_TAG}"
  #         echo "tags=${TAGS}" >> $GITHUB_OUTPUT

  #     - name: Build and push Triton Jupyter Docker image
  #       uses: docker/build-push-action@v6.7.0
  #       with:
  #         context: ./triton-image-jupyter
  #         file: ./triton-image-jupyter/Dockerfile
  #         push: true
  #         tags: ${{ steps.tags.outputs.tags }}
